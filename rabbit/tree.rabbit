(main (world ghost)
      (cons 99 (lambda (arg)
                 (main (state world)
(let ((seed state)
      (mod (lambda (a m) (- a (* (/ a m) m))))
      (rng (lambda (_) (let ((next (mod (+ (* seed 5) 89219821) 1000000009)))
                         (begin (set! seed next) next))))
      (inc (lambda (x) (+ x 1)))
      (dec (lambda (x) (- x 1)))
      (adjust-list (lambda (ls nothing len)
            (let ((flag 0)
               (f (lambda (ls nothing len)
                    (if (= 0 len) nothing
                      (if (= 0 flag)
                        (cons (car ls)
                              (if (atom? (cdr ls))
                                (begin (set! flag 1) (f ls nothing (dec len)))
                                (f (cdr ls) nothing (dec len))))
                        (cons nothing (f ls nothing (dec len)))
                    )))))
              (f ls nothing len))
                                        ))
      (make-tree (lambda (ls depth)
            (let ((mk (lambda (dep)
                        (if (= 0 dep)
                          (let ((x (car ls)))
                            (begin (set! ls (cdr ls)) x))
                          (cons (mk (- dep 1)) (mk (- dep 1)))))))
              (mk depth)
              )
                                     ))
      (access-tree (lambda (t i pow2depth-1)
                     (if (= 0 pow2depth-1)
                       t
                       (if (< i pow2depth-1)
                         (access-tree (car t) i (/ pow2depth-1 2))
                         (access-tree (car t) (- i pow2depth-1) (/ pow2depth-1 2)))
                       )))
      )
  (let ((nstate (rng 0)))
    (cons nstate (mod nstate 4)))
  )
                       )
                 )))

