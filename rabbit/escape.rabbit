; ライブラリ ;{{{
(define (mod a m) (- a (* (/ a m) m)))
(define (inc x) (+ x 1))
(define (dec x) (- x 1))
(define (zero? x) (= 0 x))
(define (min x y) (if (> x y) y x))
(define (null? ls) (atom? (cdr ls)))
(define (and a b) (* a b))
(define (or a b) (> (+ a b) 0))
(define (not a) (- 1 a))
(define (null) (cons -1 -1))
(define (nth-of n lst)
    (if (zero? n) (car lst) (nth-of (dec n) (cdr lst))))
(define (pow x y)
 (if (zero? y) 1 (* x (pow x (dec y)))))
(define (search-idx f ls) ; return pos or negative value
  (if (null? ls) -33554432 (if (f (car ls)) 0 (inc (search-idx f (cdr ls))))))
(define (search-elem f ls) ; return element or (null)
  (if (null? ls) (null) (if (f (car ls)) (car ls) (search-elem f (cdr ls)))))
(define (last ls) (if (null? (cdr ls)) (car ls) (last (cdr ls))))
(define (reverse ls)
  (let ((f (lambda (ls a) (if (null? ls) a (f (cdr ls) (cons (car ls) a))))))
  (f ls (null))))
(define (map f ls)
  (if (null? ls) ls (cons (f (car ls)) (map f (cdr ls)))))
(define (iota n)
 (let ((f (lambda (i n) (if (= i n) (null) (cons i (f (inc i) n))))))
  (f 0 n)))
(define (replicate n x)
 (if (zero? n) (null) (cons x (replicate (dec n) x))))
(define (id x) x)
(define (filter f ls)
  (if (null? ls) (null)
    (if (f (car ls)) (cons (car ls) (filter f (cdr ls))) (filter f (cdr ls)))))
(define (min-by f ls)
  (let ((min2 (lambda (x y) (if (> (car x) (car y)) y x))))
    (let ((rec (lambda (xs)
                 (if (null? (cdr xs)) (cons (f (car xs)) (car xs))
                   (min2 (cons (f (car xs)) (car xs)) (rec (cdr xs)))))))
      (cdr (rec ls)))))
;}}}

; 木;{{{
; (depth tree)
(define (depth-of-t tree) (car tree))
(define (raw-tree-of tree) (cdr tree))
(define (size-of-t tree) (pow 2 (depth-of-t tree)))

(define (list-to-t depth ls)
  (let ((mk (lambda (dep)
              (if (= 0 dep)
                (let ((x (car ls)))
                  (begin (set! ls (cdr ls)) x))
                (cons (mk (- dep 1)) (mk (- dep 1)))))))
    (cons depth (mk depth))))
(define (get-nth-of-t n tree)
 (let ((rec (lambda (t n halfsize)
              (if (zero? halfsize)
                t
                (if (> halfsize n)
                  (rec (car t) n (/ halfsize 2))
                  (rec (cdr t) (- n halfsize) (/ halfsize 2)))))))
     (rec (raw-tree-of tree) n (/ (size-of-t tree) 2))
   ))
(define (set-nth-of-t n v tree)
  (let ((rec (lambda (t n halfsize)
               (if (zero? halfsize)
                 v
                 (if (> halfsize n)
                   (cons (rec (car t) n (/ halfsize 2)) (cdr t))
                   (cons (car t) (rec (cdr t) (- n halfsize) (/ halfsize 2))))))))
    (cons (depth-of-t tree) (rec (raw-tree-of tree) n (/ (size-of-t tree) 2)))))
(define (map-t f tree)
  (let ((rec (lambda (dep t)
               (if (zero? dep)
                (f t)
                (cons (rec (dec dep) (car t)) (rec (dec dep) (cdr t)))))))
   (cons (depth-of-t tree) (rec (depth-of-t tree) (raw-tree-of tree)))))
;}}}

; queue;{{{
; queue : (front (reversed tail))
; push-tail, pop-front
(define (new-q) (cons (null) (null)))
(define (push-q x q) (cons (car q) (cons x (cdr q))))
(define (empty-q? q) (and (null? (car q)) (null? (cdr q))))
(define (rebalance-q q)
  (if (null? (car q))
    (cons (reverse (cdr q)) (car q))
    q))
(define (top-q q) (car (car q)))
(define (pop-q q) (cons (cdr (car q)) (cdr q)))
;(define (queue-pop q) ; return (x, queue)
;  (if (null? (car q))
;    (queue-pop (cons (reverse (cdr q)) (car q)))
;    (cons (car (car q)) (cons (cdr (car q)) (cdr q)))))
;}}}

; raw-world の処理用;{{{
(define (map2 f ls) ; クソな形式のリスト上での map
  (if (atom? (cdr ls))
    (cons (f (car ls)) (cdr ls))
    (cons (f (car ls)) (map2 f (cdr ls)))))
(define (fxxk-to-list ls)
  (cons (car ls) (if (atom? (cdr ls)) (null) (fxxk-to-list (cdr ls)))))
(define (adjust-list ls nothing len) ; クソな形式のリストから固定長リストに.
  (let ((flag 0)
        (f (lambda (ls nothing len)
             (if (= 0 len) (cons -1 -1)
               (if (= 0 flag)
                 (cons (car ls)
                       (if (atom? (cdr ls))
                         (begin (set! flag 1) (f ls nothing (dec len)))
                         (f (cdr ls) nothing (dec len))))
                 (cons nothing (f ls nothing (dec len))))))))
    (f ls nothing (inc len))))
;}}}

(define (INF) 33554432)
(define (field-size) 32)
(define (field-size-log) 5)
;(define (field-size) 8)
;(define (field-size-log) 3)

; world の生成;{{{
; [ T: field, L : lambda man, [G] : ghosts]
; T : tree
; L : [ P, ]
; G : [ P, ]
; P : (x, y)
(define (initialize-world raw-world)
 (let ((raw-field (car raw-world))
       (raw-lman (car (cdr raw-world)))
       (raw-ghosts (car (cdr (cdr raw-world))))
       )
   (let ((field
          (list-to-t (field-size-log)
           (map
            (lambda (rrooww) (list-to-t (field-size-log) rrooww))
            (adjust-list
              (map2 (lambda (row) (adjust-list row 0 (field-size))) raw-field)
              (replicate (field-size) 0)
              (field-size)))))
         (lman (cons
                 (cons (car (car (cdr raw-lman)))   ; x
                       (cdr (car (cdr raw-lman))))  ; y
                 (null)))
         (ghosts (map (lambda (g)
                 (cons
                   (cons (car (car (cdr g)))         ; x
                         (cdr (car (cdr g))))        ; y
                   (null)))
                       (fxxk-to-list raw-ghosts)))
         )
     (cons field (cons lman (cons ghosts (null))))
   )))
;}}}

; helper;{{{
;0: up;
;1: right;
;2: down;
;3: left.
(define (adjacent pos)
  (let ((x (car pos))
        (y (cdr pos)))
  (cons (cons x (dec y))
  (cons (cons (inc x) y)
  (cons (cons x (inc y))
  (cons (cons (dec x) y)
        (cons -1 -1)))))))
;(define (adjacent pos)
;  (let ((y (car pos))
;        (x (cdr pos)))
;  (cons (cons (dec y) x)
;  (cons (cons y (inc x))
;  (cons (cons (inc y) x)
;  (cons (cons y (dec x))
;        (cons -1 -1)))))))
;}}}

(define (map-table f table)
  (map-t (lambda (row) (map-t f row)) table))
(define (create-cell-table init-v world)
 (map-t (lambda (row) (map-t (lambda (_) init-v) row) ) (car world)))
(define (get-cell pos table)
  (get-nth-of-t (car pos) (get-nth-of-t (cdr pos) table)))
(define (set-cell pos v table)
  (set-nth-of-t (cdr pos) (set-nth-of-t (car pos) v (get-nth-of-t (cdr pos) table)) table))

;{{{
;(define (pseudo-field)
;    (cons (cons 0 (cons 0 (cons 0 0)))
;    (cons (cons 2 (cons 5 (cons 2 0)))
;    (cons (cons 0 (cons 0 (cons 0 0))) 0))))

;(define (to-pow2 n)
; (let ((rec (lambda (t n) (if (> n t) (rec (* 2 t) n) t))))
;  (rec 1 n)))
;
;(define (log2 n)
; (let ((rec (lambda (n) (if (zero? n) 0 (inc (rec (/ n 2)))))))
;  (rec (dec n))))
;
;(define (initialize-useflag n)
; (list-to-t (log2 n) (replicate (* 2 n) 0)))
;(define (check-use i useflag)
; (get-nth-of-t i useflag))
;(define (set-use i useflag)
; (set-nth-of-t i 1 useflag))
;}}}

(define (yasuna state raw-world)
 (let ((world (initialize-world raw-world))
       (temp-var 0)
       (temp-func 0)
       (trash 0))
  (let ((dist (create-cell-table 0 world)) ; bfs での結果が勝手に入る
        (score (create-cell-table 0 world))
        (field (nth-of 0 world))
        (lambda-pos (nth-of 0 (nth-of 1 world)))
        (ghost-poss (map (lambda (g) (car g)) (nth-of 2 world)))
        )
   ; bfs;{{{
    (let ((bfs (lambda (q)
               (begin
                (set! q (rebalance-q q))
                (if (empty-q? q) (null)
                  (let ((pos (top-q q))
                        (nq (pop-q q))
                        (d 0))
                    (begin
                      (set! d (inc (get-cell pos dist)))
                      (set! trash (map
                        (lambda (npos)
                          (let ((dd (get-cell npos dist)))
                            (if (and (> dd d) (not (= 0 (get-cell npos field))))
                              (begin
                                (set! nq (push-q npos nq))
                                (set! dist (set-cell npos d dist))
                                0
                                )
                              0 ))) (adjacent pos)))
                      (cons pos (bfs nq))))))))
          (bfs-n (lambda (q n)
               (begin
                (set! q (rebalance-q q))
                (if (empty-q? q) (null)
                  (let ((pos (top-q q))
                        (nq (pop-q q))
                        (d 0))
                    (begin
                      (set! d (inc (get-cell pos dist)))
                      (set! trash (map
                        (lambda (npos)
                          (let ((dd (get-cell npos dist)))
                            (if (and (and (> n d) (> dd d))
                                     (not (= 0 (get-cell npos field))))
                              (begin
                                (set! nq (push-q npos nq))
                                (set! dist (set-cell npos d dist))
                                0
                                )
                              0 ))) (adjacent pos)))
                      (cons pos (bfs-n nq n))))))))
          (restore (lambda (pos)
                     (let ((d (dec (get-cell pos dist))))
                       (if (> 0 d) (null)
                         (let ((npos (search-elem
                                      (lambda (p) (= d (get-cell p dist)))
                                      (adjacent pos))))
                           (cons pos (restore npos)))))))
          );}}}
       (let ((start-bfs-n (lambda (pos n)
                            (begin (set! dist (map-table (lambda (_) (INF)) dist))
                                   (set! dist (set-cell pos 0 dist))
                                   (bfs-n (push-q pos (new-q)) n)))))
         (let
           ((bfs-order (start-bfs-n lambda-pos 5))
            (adj (adjacent lambda-pos))
            (objective 0)
            (res 0)
            (near-ghosts (null)))
           (begin
             ;(set! objective (search-elem (lambda (pos)
             ;                               (let ((v (get-cell pos field)))
             ;                                 (or (= v 2) (= v 3)))
             ;                               ) bfs-order))
             (set! near-ghosts ; 近いゴースト達
               (filter (lambda (pos) (> (INF) (get-cell pos dist))) ghost-poss))
             (set! trash (map (lambda (pos) (begin ; 行けない所はスコア INF
                      (set! score (set-cell pos (get-cell pos dist) score)) 0)
                    ) adj))
             (set! trash (map (lambda (ghost) (begin
                    (start-bfs-n ghost 5)
                    (set! trash (map (lambda (pos) (begin
                           (set! score (set-cell pos
                                     (+ (get-cell pos score)
                                        ; 適当な失点を足しこむ
                                        (pow 2 (- 7 (min (get-cell pos dist) 6))))
                                        ;(pow 2 (min (get-cell pos dist) 6)))
                                     score)
                             ) 0)) adj))
                    0)) near-ghosts))
             (set! res (min-by (lambda (pos) (get-cell pos score))
                               adj))
             ;(set! res (last (restore objective)))
             (set! res (search-idx (lambda (pos)
                                     (and (= (car pos) (car res)) (= (cdr pos) (cdr res)))
                                     )
                                   adj))
             (cons 0 res)
             )))))))

(define (pseudo-field)
 ;(cons (cons 0 (cons 1 (cons 2 0)))
 ;(cons (cons 3 (cons 4 (cons 5 0)))
 ;(cons (cons 6 (cons 7 (cons 8 0))) 0))))
 (cons (cons 0 (cons 0 (cons 0 (cons 0 0))))
 (cons (cons 0 (cons 1 (cons 2 (cons 0 0))))
 (cons (cons 0 (cons 1 (cons 3 (cons 0 0))))
 (cons (cons 0 (cons 0 (cons 0 (cons 0 0)))) 0)))))
;(yasuna 0 (cons (pseudo-field) ;map
;            (cons ; lambda man
;                (cons 3 ; vitality
;                        (cons (cons 1 1) ; location
;                            (cons 0 ; direction
;                                (cons 3 ;life
;                                      0 ; score
;                                      ))))
;                (cons ; ghosts
;                  (cons ; ghost 1
;                    (cons 0 ; vitality
;                          (cons (cons 2 2) ; location
;                                0 ; direction
;                                ))
;                    (cons ; ghost 2
;                    (cons 0 ; vitality
;                          (cons (cons 1 2) ; location
;                                0 ; direction
;                                ))
;                    0))
;                  0 ; fruit
;                ))))

(main (_1 _2)
    (cons 0 yasuna))

; vim:set ft=scheme fdm=marker commentstring=;%s:
